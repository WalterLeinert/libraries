// Nodejs imports
import * as fs from 'fs';
import * as os from 'os';
import * as path from 'path';
import * as util from 'util';


// -------------------------- logging -------------------------------
import {
    configure, getLogger, ILogger, levels, Logger, using, XLog
} from '@fluxgate/common';
// -------------------------- logging -------------------------------

import { ColumnInfo, DataType } from './columnInfo';
import { IConfigInfo } from './configInfo';
import { IGenerator } from './generator.interface';
import { TableInfo } from './tableInfo';

/**
 * 
 */
export abstract class GeneratorBase implements IGenerator {
    protected static logger = getLogger('GeneratorBase');

    protected static capitalizeFirstLetter(text: string) {
        return text.charAt(0).toUpperCase() + text.slice(1);
    }


    protected static writeCommentline(fd: number) {
        GeneratorBase.writeLineSync(fd, '//');
    }


    protected static writeLineSync(fd: number, text = '') {
        fs.writeSync(fd, text + os.EOL);
    }


    protected static formatDefaultValue(colInfo: ColumnInfo): string {
        let rval = '';

        if (colInfo.default) {
            let val = '';

            switch (colInfo.type) {
                case DataType.Number:
                    val = colInfo.default;
                    break;
                case DataType.String:
                    val = '"' + colInfo.default + '"';
                    break;
                case DataType.Date:
                    val = 'new Date("' + colInfo.default + '")';
                    break;
                default:
                    throw new Error(util.format('unsupported data type: %s', DataType[colInfo.type as number]));
            }

            rval = ' = ' + val + ';';
        }
        return rval;
    }

    protected static mapDataType(type: DataType): string {
        switch (type) {
            case DataType.Number:
                return 'number';
            case DataType.String:
                return 'string';
            case DataType.Date:
                return 'Date';
            default:
                throw new Error(util.format('unsupported data type: %s', DataType[type as number]));
        }
    }

    protected static quote(text: string): string {
        return '\'' + text + '\'';
    }


    protected static getClassName(info: TableInfo): string {
        return GeneratorBase.capitalizeFirstLetter(info.name);
    }

    protected static getInterfaceName(info: TableInfo): string {
        return 'I' + this.getClassName(info);
    }

    protected static getPrimaryKeyName(info: TableInfo): string {
        const pk = info.columns.filter((col) => col.isPrimaryKey);
        if (!pk || pk.length <= 0) {
            return 'no-pk-column';
        }
        return pk[0].name;
    }


    constructor(protected outputDir: string, protected configInfo: IConfigInfo) {
        using(new XLog(GeneratorBase.logger, levels.INFO, 'ctor', 'outputDir = %s', outputDir), (log) => {
            this.outputDir = path.normalize(outputDir);
            fs.stat(outputDir, (err, stats) => {
                if (!stats) {
                    fs.mkdir(outputDir, (exc) => {
                        throw exc;
                    });
                } else if (!stats.isDirectory()) {
                    throw new Error('No directory: ' + outputDir);
                }
            });
        });
    }


    public abstract generateFiles(tableInfos: TableInfo[]);
    public abstract generateFile(fileName: string, tableInfos: TableInfo[]);



    protected dumpHeader(fd: number) {
        GeneratorBase.writeLineSync(fd, '//');
        GeneratorBase.writeLineSync(fd, '// DO-NOT-EDIT');
        GeneratorBase.writeLineSync(fd, '//');
        GeneratorBase.writeLineSync(fd, util.format('// Model generated by %s', process.argv[1]));
        GeneratorBase.writeLineSync(fd, util.format('// Date: ', new Date().toISOString()));
        GeneratorBase.writeLineSync(fd, util.format('// Connection: host = %s, database = %s',
            this.configInfo.host, this.configInfo.database));
        GeneratorBase.writeLineSync(fd, '//');

        GeneratorBase.writeLineSync(fd);
    }

}